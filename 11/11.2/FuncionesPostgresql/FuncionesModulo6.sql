CREATE OR REPLACE FUNCTION insert_dim_analista()
RETURNS VOID AS
$$
BEGIN
    INSERT INTO DIM_ANALISTA_RP (IND_ANALISTA, NAM_ANALISTA, REG_ANALISTA)
    SELECT COD_ANALISTA_COBRANZAS, 
           NOMBRE_ANALISTA_COBRANZA, 
           REGION_ANALISTA_COBRANZA
    FROM Analista_cobranza;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION insert_dim_cliente()
RETURNS VOID AS
$$
BEGIN
    INSERT INTO DIM_CLIENTE_RP (IND_CLIENTE, NAM_CLIENTE, STA_CLIENTE)
    SELECT COD_CLIENTE, 
           LEFT(NOMBRE, 50), 
           ESTADO_CLIENTE
    FROM Cliente;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION insert_dim_calendario()
RETURNS VOID AS
$$
BEGIN
    INSERT INTO DIM_CALENDARIO_RP (
        FECHA_CLN,
        PERIODO_CLN,
        AÑO_CLN,
        MES_CLN,
        MES_NOM_CLN,
        DIA_CLN,
        TRIM_CLN
    )
    SELECT
        FECHA_VENCIMIENTO AS FECHA_CLN, 
        CAST(TO_CHAR(FECHA_VENCIMIENTO, 'YYYYMMDD') AS INTEGER) AS PERIODO_CLN, 
        TO_CHAR(FECHA_VENCIMIENTO, 'YYYY') AS AÑO_CLN,
        EXTRACT(MONTH FROM FECHA_VENCIMIENTO) AS MES_CLN,
        TO_CHAR(FECHA_VENCIMIENTO, 'Month') AS MES_NOM_CLN,
        EXTRACT(DAY FROM FECHA_VENCIMIENTO) AS DIA_CLN,
        CASE 
            WHEN EXTRACT(MONTH FROM FECHA_VENCIMIENTO) BETWEEN 1 AND 3 THEN 'Q1'
            WHEN EXTRACT(MONTH FROM FECHA_VENCIMIENTO) BETWEEN 4 AND 6 THEN 'Q2'
            WHEN EXTRACT(MONTH FROM FECHA_VENCIMIENTO) BETWEEN 7 AND 9 THEN 'Q3'
            WHEN EXTRACT(MONTH FROM FECHA_VENCIMIENTO) BETWEEN 10 AND 12 THEN 'Q4'
        END AS TRIM_CLN
    FROM Deuda;
END;
$$ LANGUAGE plpgsql;

-- Función para insertar en DIM_ANALISTA_RP
CREATE OR REPLACE FUNCTION insert_dim_analista()
RETURNS VOID AS
$$
BEGIN
    INSERT INTO DIM_ANALISTA_RP (IND_ANALISTA, NAM_ANALISTA, REG_ANALISTA)
    SELECT COD_ANALISTA_COBRANZAS, 
           NOMBRE_ANALISTA_COBRANZA, 
           REGION_ANALISTA_COBRANZA
    FROM Analista_cobranza;
END;
$$ LANGUAGE plpgsql;

-- Función para insertar en DIM_CLIENTE_RP
CREATE OR REPLACE FUNCTION insert_dim_cliente()
RETURNS VOID AS
$$
BEGIN
    INSERT INTO DIM_CLIENTE_RP (IND_CLIENTE, NAM_CLIENTE, STA_CLIENTE)
    SELECT COD_CLIENTE, 
           LEFT(NOMBRE, 50), 
           ESTADO_CLIENTE
    FROM Cliente;
END;
$$ LANGUAGE plpgsql;

-- Función para insertar en DIM_CALENDARIO_RP
CREATE OR REPLACE FUNCTION insert_dim_calendario()
RETURNS VOID AS
$$
BEGIN
    INSERT INTO DIM_CALENDARIO_RP (
        FECHA_CLN,
        PERIODO_CLN,
        AÑO_CLN,
        MES_CLN,
        MES_NOM_CLN,
        DIA_CLN,
        TRIM_CLN
    )
    SELECT
        FECHA_VENCIMIENTO AS FECHA_CLN, -- Utiliza la fecha de vencimiento directamente
        CAST(TO_CHAR(FECHA_VENCIMIENTO, 'YYYYMMDD') AS INTEGER) AS PERIODO_CLN, -- Periodo en formato YYYYMMDD
        TO_CHAR(FECHA_VENCIMIENTO, 'YYYY') AS AÑO_CLN,  -- Año
        EXTRACT(MONTH FROM FECHA_VENCIMIENTO) AS MES_CLN, -- Mes en número
        TO_CHAR(FECHA_VENCIMIENTO, 'Month') AS MES_NOM_CLN, -- Mes en nombre
        EXTRACT(DAY FROM FECHA_VENCIMIENTO) AS DIA_CLN, -- Día
        CASE 
            WHEN EXTRACT(MONTH FROM FECHA_VENCIMIENTO) BETWEEN 1 AND 3 THEN 'Q1'
            WHEN EXTRACT(MONTH FROM FECHA_VENCIMIENTO) BETWEEN 4 AND 6 THEN 'Q2'
            WHEN EXTRACT(MONTH FROM FECHA_VENCIMIENTO) BETWEEN 7 AND 9 THEN 'Q3'
            ELSE 'Q4'
        END AS TRIM_CLN -- Trimestre
    FROM Deuda;
END;
$$ LANGUAGE plpgsql;

-- Función para ejecutar todo (insertar en las tres tablas)
CREATE OR REPLACE FUNCTION insert_all_dim_tables()
RETURNS VOID AS
$$
BEGIN
    PERFORM insert_dim_analista();
    PERFORM insert_dim_cliente();
    PERFORM insert_dim_calendario();
END;
$$ LANGUAGE plpgsql;



-- Función para insertar en FACT_REPORTE_DEUDAS
CREATE OR REPLACE FUNCTION insert_fact_reporte_deudas()
RETURNS VOID AS
$$
BEGIN
    INSERT INTO FACT_REPORTE_DEUDAS (
        IND_ANALISTA,
        REG_ANALISTA,
        ESTADO_COBRANZA,
        IND_DATE,
        IND_CLIENTE,
        SUMA_MONTO_DEUDA_ANALISTA,
        SUMA_MONTO_DEUDA_REGION,
        CANTIDAD_CLIENTES_ATRASADO_ANALISTA,
        CANTIDAD_CLIENTES_AL_DIA_ANALISTA,
        CANTIDAD_CLIENTES_COBRANZA_ADMIN_TRIMESTRE
    )
    SELECT
        N.IND_ANALISTA,
        N.REG_ANALISTA,
        A.ESTADO_COBRANZA,
        T.IND_DATE,
        S.IND_CLIENTE,
        SUM(A.MONTO_DEUDA) OVER (PARTITION BY N.IND_ANALISTA) AS SUMA_MONTO_DEUDA_ANALISTA,
        SUM(A.MONTO_DEUDA) OVER (PARTITION BY N.REG_ANALISTA) AS SUMA_MONTO_DEUDA_REGION,
        COUNT(CASE WHEN A.ESTADO_DEUDA = 'Atrasado' THEN 1 END) OVER (PARTITION BY N.IND_ANALISTA) AS CANTIDAD_CLIENTES_ATRASADO_ANALISTA,
        COUNT(CASE WHEN A.ESTADO_DEUDA = 'Al dia' THEN 1 END) OVER (PARTITION BY N.IND_ANALISTA) AS CANTIDAD_CLIENTES_AL_DIA_ANALISTA,
        COUNT(CASE WHEN A.ESTADO_COBRANZA = 'Administrativa' THEN 1 END) OVER (PARTITION BY N.IND_ANALISTA, T.TRIM_CLN) AS CANTIDAD_CLIENTES_COBRANZA_ADMIN_TRIMESTRE
    FROM 
        DEUDA A
    LEFT JOIN DIM_CALENDARIO_RP T ON A.FECHA_VENCIMIENTO = T.FECHA_CLN
    LEFT JOIN DIM_ANALISTA_RP N ON A.COD_ANALISTA_COBRANZA = N.IND_ANALISTA
    LEFT JOIN DIM_CLIENTE_RP S ON A.COD_CLIENTE = S.IND_CLIENTE
    GROUP BY
        N.IND_ANALISTA,
        N.REG_ANALISTA,
        A.ESTADO_COBRANZA,
        T.IND_DATE,
        S.IND_CLIENTE,
        T.TRIM_CLN
    HAVING 
        SUM(A.MONTO_DEUDA) > 0 -- Solo inserta cuando el monto de deuda total sea mayor a 0
    ORDER BY 
        N.IND_ANALISTA, T.YEAR_CLN, T.TRIM_CLN;
END;
$$ LANGUAGE plpgsql;